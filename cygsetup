#!/bin/sh
# Copyright Starfish Storage Corp, 2018 - Doug Hughes
# this script is cloned in using SF-Wrappers into the sfenv
# and includes a patches directory that is requisite

HOME=/home/starfish
export HOME

if [ $# -ne 1 ]; then
  echo "must supply starfish version number (e.g. 4.0.4501)"
  exit 1
fi

version=$1
# where might I find the cygwin necessary patches
mydir=`pwd`
cygsetupdir=$mydir/`dirname $0`

echo "Git clone password: "
stty -echo
read pass
stty echo

#echo password is $pass

echo "installing python updates"
python -m pip install --upgrade pip
pip install virtualenv
mkdir -p $HOME
virtualenv $HOME/sfenv
cd $HOME/sfenv
. bin/activate
pip install wheel PyNaCl psycopg2 egg future

if [ ! -f /usr/bin/sudo ]; then
	cat > /usr/bin/sudo <<EOF
# fake sudo for cygwin
#!/usr/bin/bash

"\$@"
EOF
fi

# copy the patches from the SF-wrappers directory
if [ ! -d $cygsetupdir/../SF-wrappers ]; then
  echo "I can't find the SF-wrappers directory. I'm expecting it to be at"
  echo `pwd`
  exit 1
fi
cp -r $cygsetupdir/cygpatches patches
if [ $? -ne 0 ]; then
  echo "failed copying patch directory"
  exit 1
fi

git clone -q -o $version https://dhughes%40starfishstorage.com:$pass@github.com/StarfishStorage/starfish
if [ $? -ne 0 ]; then
	echo "git glone of starfish failed: ec $?"
	exit 1
fi
git clone -q -o $version https://dhughes%40starfishstorage.com:$pass@github.com/StarfishStorage/sf-packaging
if [ $? -ne 0 ]; then
	echo "git glone of sf-packaging failed: ec $?"
	exit 1
fi
git clone -q -o $version https://dhughes%40starfishstorage.com:$pass@github.com/StarfishStorage/ansible
if [ $? -ne 0 ]; then
	echo "git glone of ansible failed: ec $?"
	exit 1
fi
git clone -q -o $version https://dhughes%40starfishstorage.com:$pass@github.com/StarfishStorage/SF-wrappers
if [ $? -ne 0 ]; then
	echo "git glone of SF-wrappers failed: ec $?"
	exit 1
fi

cd starfish


# cygwin doesn't need nginxor nodejs setup
perl -i.bak -pe ' s/(    centos_install_nginx)/\#$1/; s/(    centos_install_nodejs)/\#$1/; ' scripts/setup_dev_env.sh

#cygwin comment out things in requirements.txt that don't need to be built
perl -i.bak -pe 's/^(boto|vmprof|psutil)/\#$1/' agent/requirements/base.txt
perl -i.bak -pe 's/^(boto|vmprof|psutil)/\#$1/' client/requirements/base.txt
perl -i.bak -pe 's/^/\#/ if /(^boto|^vmprof|^sqlalchemy|^cryptography|egg=python-swiftclien|pyOpenSSL|future|psutil)/' starfish/requirements/base.txt
# remove extra /'s from post-install.sh - handled by patch
#perl -i.bak -pe 'if (m/STARFISH_BIN_DIR=/) {printf "    SFHOME=\$(echo \$SFHOME | tr -s %c/%c)\n", 39, 39;}' ../sf-packaging/packaging-scripts/post-install.sh
# turn off wdb
perl -i.bak -pe 's/^wdb/\#wdb/' starfish/requirements/dev.txt
	

# strip off double slashes in paths. Cygwin doesn't like them
# also comment out generate manpages from install_tgz
pushd ..
patch -p0 --forward < patches/sf-packaging.patch
if [ $? -ne 0 ]; then
	echo "patch of sf-packaging installers failed"
	exit 1
fi
popd

patch --forward -p0 < ../patches/setup.py.patch
if [ $? -ne 0 ]; then
	echo "patch of setup.py failed"
	exit 1
fi

# fix base_service.py - disable vmprof
#perl -i.bak -pe '/^import vmprof/^/\#/' starfish/src/sfutils/base_service.py
patch --forward -p0 < ../patches/base_service.patch
if [ $? -ne 0 ]; then
	echo "patch starfish/src/sfutils/base_service.py failed"
	exit 1
fi

# install and fix psutil
mkdir -p $HOME/sfenv/pymods > /dev/null 2>&1
cd $HOME/sfenv/pymods
if [ -d psutil-5.2.0 ]; then
	rm -rf psutil-5.2.0
fi
pip download psutil==5.2.0
if [ ! -f psutil-5.2.0.tar.gz ]; then
	echo "pip download of psutil-5.2.0 failed"
	exit 1
fi
# ignore the setup.py error about cygwin support
tar xfz psutil-5.2.0.tar.gz
if [ $? -ne 0 ]; then
	echo "tar extraction of psutil-5.2.0 failed. Check disk space?"
	exit 1
fi
cd psutil-5.2.0
patch -p1 --forward < ../../patches/cygwin-support.patch
if [ $? -ne 0 ]; then
	echo "patch of cygwin-support failed"
	exit 1
fi
# this patch may not be needed because _pscygwin.py should be used
patch -p0 --forward < ../../patches/_pswindows.py.patch
if [ $? -ne 0 ]; then
	echo "patch of _pswindows.py failed"
	exit 1
fi
patch -p0 --forward < ../../patches/_pscygwin.py.patch
if [ $? -ne 0 ]; then
	echo "patch of _pscygwin.py failed"
	exit 1
fi
echo "Done patching psutil"
make install
if [ $? -ne 0 ]; then
	echo "make install of psutil failed"
	exit 1
fi

cd build/lib.cygwin-*
# copy the built package into virtualenv
mkdir -p /opt/starfish/lib/virtualenv/sf-cli/lib/python2.7/site-packages > /dev/null 2>&1
mkdir -p /opt/starfish/lib/virtualenv/sf-agent/lib/python2.7/site-packages > /dev/null 2>&1
tar cf - psutil | tar -C /opt/starfish/lib/virtualenv/sf-cli/lib/python2.7/site-packages -xvf -
tar cf - psutil | tar -C /opt/starfish/lib/virtualenv/sf-agent/lib/python2.7/site-packages -xvf -

# setup the development environment
cd $HOME/sfenv/starfish
scripts/setup_dev_env.sh

# fix up and execute packaging scripts - fixed using 'patch'
#cd $HOME/sfenv/sf-packaging
#perl -i.bak -pe 's/^/#/ if m/\s+generate_manpages$|is_python_version_valid_for/' scripts/build_tgz_package.sh
#perl -pe 'printf"valid_cygwin = (%ccp27%c,%ccp27m%c,%ccygwin_2_10_0_x86_64%c)\n", 39, 39, 39, 39, 39, 39 if m/valid_solaris/; s/valid_solaris/valid_solaris, valid_cygwin/' scripts/build_tgz_package.sh

cd $HOME/sfenv/sf-packaging
scripts/generate-dist.sh

./build-package.sh sf-cli tgz --method virtenv
./build-package.sh sf-agent tgz --method virtenv
./build-package.sh sf-core tgz --method virtenv
scripts/install-tgz.sh -n -s opt/starfish -f redhat build/sf-core-*dirty*.tar.gz /
sh /opt/starfish/data/sf-core/post-install.sh 1
scripts/install-tgz.sh -n -s opt/starfish -f redhat build/sf-agent-*dirty*.tar.gz /
sh /opt/starfish/data/sf-agent/post-install.sh 1
scripts/install-tgz.sh -n -s opt/starfish -f redhat build/sf-cli-*dirty*.tar.gz /
sh /opt/starfish/data/sf-cli/post-install.sh 1

# for some reason future and builtins doesn't get copied in by the package builder
cd $SFHOME/sfenv
find lib -name builtins | xargs tar -cf - | (cd /opt/starfish/lib/virtualenv/sf-agent; tar -xf -)
find lib -name future* | xargs tar -cf - | (cd /opt/starfish/lib/virtualenv/sf-agent; tar -xf -)


echo "building tarball"
cd /
tar cfz /tmp/starfish-${version}.tar.gz /opt/starfish /home/starfish

echo "copy in startfish"
mkdir -p /usr/local/bin > /dev/null 2>&1
cp -r $cygsetupdir/cygpatches/startfish /usr/local/bin/startfish
echo "SUCCESS!"
exit 0

